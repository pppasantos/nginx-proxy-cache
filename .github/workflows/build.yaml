name: Build

on:
  push:
    branches: 
      - "main"
      - "feat/**"   # Branches de feature
      - "fix/**"       # Branches de fix
      - "hotfix/**"    # Branches de hotfix
      - "release/**"   # Branches de release
    tags:
      - "v*"           # Tags de versão (v1.0.0, v2.1.3, etc)
      - "**"           # Ou todas as tags
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: pppasantos
  IMAGE_NAME: nginx-proxy-cache

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Git context
        id: git
        run: |
          # Detecta se é tag, branch ou PR
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # É uma tag - extrai apenas o nome da tag
            GIT_TAG=${GITHUB_REF#refs/tags/}
            echo "type=tag" >> $GITHUB_OUTPUT
            echo "ref=$GIT_TAG" >> $GITHUB_OUTPUT
            echo "is_main=false" >> $GITHUB_OUTPUT
            echo "Detected tag: $GIT_TAG"
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            # É a branch main
            echo "type=branch" >> $GITHUB_OUTPUT
            echo "ref=main" >> $GITHUB_OUTPUT
            echo "is_main=true" >> $GITHUB_OUTPUT
            echo "Detected branch: main"
          elif [[ "$GITHUB_REF" == refs/heads/* ]]; then
            # É outro branch
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9.-]/-/g' | cut -c 1-30)
            echo "type=branch" >> $GITHUB_OUTPUT
            echo "ref=$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "is_main=false" >> $GITHUB_OUTPUT
            echo "Detected branch: $BRANCH_NAME (safe: $SAFE_BRANCH_NAME)"
          elif [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            # É um PR
            echo "type=pr" >> $GITHUB_OUTPUT
            echo "ref=pr" >> $GITHUB_OUTPUT
            echo "is_main=false" >> $GITHUB_OUTPUT
            echo "Detected pull request"
          else
            echo "type=unknown" >> $GITHUB_OUTPUT
            echo "ref=unknown" >> $GITHUB_OUTPUT
            echo "is_main=false" >> $GITHUB_OUTPUT
          fi
          
          # SHA curto
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-8)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Generate Docker tags
        id: tags
        run: |
          TAGS=""
          
          # Se for uma tag, usa o nome exato da tag
          if [ "${{ steps.git.outputs.type }}" = "tag" ]; then
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.git.outputs.ref }}"
          
          # Se for branch main
          elif [ "${{ steps.git.outputs.is_main }}" = "true" ]; then
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.git.outputs.short_sha }}"
          
          # Se for outro branch
          elif [ "${{ steps.git.outputs.type }}" = "branch" ]; then
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.git.outputs.ref }}-${{ steps.git.outputs.short_sha }}"
          
          # Se for PR
          elif [ "${{ steps.git.outputs.type }}" = "pr" ]; then
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ steps.git.outputs.short_sha }}"
          
          else
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.git.outputs.short_sha }}"
          fi
          
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Generated tags: $TAGS"

      - name: Build and push with attestations and cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Install Syft for SBOM generation
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v1.0.0
          echo "Syft version:"
          syft version

      - name: Generate SBOM with Syft
        run: |
          echo "=== Generating SBOM Report with Syft ==="
          
          # Pull da imagem para garantir que está disponível localmente
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Gerar SBOM completo com Syft
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest -o json > sbom-detailed.json
          
          # Gerar SBOM em texto simples
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest > sbom-report.txt
          
          # Criar análise resumida
          echo "=== SBOM ANALYSIS ===" > sbom-analysis.txt
          echo "Generated: $(date -u)" >> sbom-analysis.txt
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> sbom-analysis.txt
          echo "SBOM Tool: Syft" >> sbom-analysis.txt
          echo "" >> sbom-analysis.txt
          
          # Extrair contagem de pacotes (com fallback)
          if command -v jq &> /dev/null; then
            PACKAGE_COUNT=$(jq '.artifacts | length' sbom-detailed.json 2>/dev/null || echo "0")
          else
            PACKAGE_COUNT=$(grep -c '"name"' sbom-detailed.json || echo "0")
          fi
          echo "Total packages: $PACKAGE_COUNT" >> sbom-analysis.txt
          echo "" >> sbom-analysis.txt
          echo "TOP PACKAGES:" >> sbom-analysis.txt
          head -50 sbom-report.txt >> sbom-analysis.txt

      - name: Security Scan with Trivy
        run: |
          echo "=== Security Scan with Trivy ==="
          
          # Instalar Trivy (alternativa ao Snyk que funciona offline)
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          
          # Scan de vulnerabilidades
          trivy image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest > trivy-scan.txt
          
          # Scan em formato JSON
          trivy image --format json ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest > trivy-scan.json

      - name: Generate build summary report
        run: |
          echo "=== BUILD SUMMARY REPORT ===" > build-summary.txt
          echo "Build Time: $(date -u)" >> build-summary.txt
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> build-summary.txt
          echo "Tags: ${{ steps.tags.outputs.tags }}" >> build-summary.txt
          echo "Branch: ${{ steps.branch.outputs.branch_name }}" >> build-summary.txt
          echo "" >> build-summary.txt
          echo "SECURITY FEATURES:" >> build-summary.txt
          echo "✅ Provenance: Enabled" >> build-summary.txt
          echo "✅ SBOM: Generated with Syft" >> build-summary.txt
          echo "✅ Trivy Security Scan: Completed" >> build-summary.txt
          echo "✅ Cache: GitHub Actions Cache" >> build-summary.txt
          echo "" >> build-summary.txt
          echo "BUILD METADATA:" >> build-summary.txt
          echo "Repo: ${{ github.repository }}" >> build-summary.txt
          echo "Commit: ${{ github.sha }}" >> build-summary.txt
          echo "Workflow: ${{ github.workflow }}" >> build-summary.txt

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            sbom-detailed.json
            sbom-report.txt
            sbom-analysis.txt
            trivy-scan.txt
            trivy-scan.json
            build-summary.txt
          retention-days: 90

      - name: Display final summary
        run: |
          echo "🎉 BUILD COMPLETED SUCCESSFULLY 🎉"
          echo "==================================="
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "🏷️  Tags: ${{ steps.tags.outputs.tags }}"
          echo "🌿 Branch: ${{ steps.branch.outputs.branch_name }}"
          echo "🔐 Security Features:"
          echo "   ✅ Provenance attestation"
          echo "   ✅ SBOM generation" 
          echo "   ✅ Trivy security scan"
          echo "   ✅ Build cache enabled"
          echo ""
          echo "📊 Artifacts generated:"
          echo "   - sbom-detailed.json (Complete SBOM)"
          echo "   - sbom-analysis.txt (SBOM summary)"
          echo "   - trivy-scan.txt (security scan)"
          echo ""
          echo "🚀 Image ready for use:"
          echo "   docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

      - name: Build and start containers for testing
        run: docker compose up --build --abort-on-container-exit

      - name: Cleanup
        if: always()
        run: |
          docker system prune -f


