name: Docker Compose + K6 Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

env:
  REGISTRY: pppasantos
  IMAGE_NAME: nginx-proxy-cache

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push with attestations
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true

      - name: Generate SBOM report
        run: |
          echo "=== Generating SBOM Report ==="
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Gerar SBOM em formato de texto
          docker sbom ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest > sbom-report.txt
          
          # Gerar análise detalhada do SBOM
          echo "=== SBOM ANALYSIS ===" > sbom-analysis.txt
          echo "Generated: $(date)" >> sbom-analysis.txt
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> sbom-analysis.txt
          echo "Total packages: $(grep -c "pkg:" sbom-report.txt || echo "0")" >> sbom-analysis.txt
          echo "" >> sbom-analysis.txt
          echo "PACKAGE LIST:" >> sbom-analysis.txt
          grep "pkg:" sbom-report.txt | head -20 >> sbom-analysis.txt

      - name: Generate provenance report
        run: |
          echo "=== Generating Provenance Report ==="
          
          # Capturar informações de provenance
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest > provenance-full.txt
          
          # Criar um resumo da provenance
          echo "=== PROVENANCE SUMMARY ===" > provenance-summary.txt
          echo "Generated: $(date)" >> provenance-summary.txt
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> provenance-summary.txt
          echo "" >> provenance-summary.txt
          
          # Extrair informações importantes
          echo "Digest: $(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format='{{index .RepoDigests 0}}')" >> provenance-summary.txt
          echo "Build Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> provenance-summary.txt
          echo "Provenance: Available in build metadata" >> provenance-summary.txt

      - name: Generate security scan report
        run: |
          echo "=== Generating Security Scan Report ==="
          
          # Executar scan e capturar resultado
          docker scan ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --file Dockerfile > security-scan.txt 2>&1 || true
          
          # Criar resumo do scan
          echo "=== SECURITY SCAN SUMMARY ===" > security-summary.txt
          echo "Scanned: $(date)" >> security-summary.txt
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> security-summary.txt
          echo "" >> security-summary.txt
          
          # Extrair informações relevantes do scan
          if grep -q "CVE" security-scan.txt; then
            echo "Vulnerabilities found: YES" >> security-summary.txt
            echo "CVEs detected: $(grep -c "CVE" security-scan.txt)" >> security-summary.txt
          else
            echo "Vulnerabilities found: NO" >> security-summary.txt
          fi

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            sbom-report.txt
            sbom-analysis.txt
            provenance-summary.txt
            security-scan.txt
            security-summary.txt
          retention-days: 90

      - name: Display build summary
        run: |
          echo "=== BUILD SECURITY SUMMARY ==="
          echo "✅ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "✅ Provenance: Generated and attached"
          echo "✅ SBOM: Generated and attached" 
          echo "✅ Security Scan: Completed"
          echo "✅ Artifacts: Uploaded to GitHub Actions"
          echo ""
          echo "Users can verify with:"
          echo "  docker sbom ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "  docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

      - name: Build and start containers for testing
        run: docker compose up --build --abort-on-container-exit

      - name: Cleanup
        if: always()
        run: docker system prune -f
