name: Docker Compose + K6 Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

env:
  REGISTRY: pppasantos
  IMAGE_NAME: nginx-proxy-cache

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push with attestations
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          provenance: true
          sbom: true
          attest: type=sbom,provenance=true

      - name: Verify attestations
        run: |
          # Baixar a imagem para verificação local
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Verificar SBOM
          echo "=== SBOM Analysis ==="
          docker sbom ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format cyclonedx-json > sbom-cyclonedx.json
          
          # Contar componentes
          COMPONENTS=$(cat sbom-cyclonedx.json | jq '.components | length')
          echo "Total components in image: $COMPONENTS"

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-artifacts
          path: |
            sbom-cyclonedx.json
          retention-days: 90

      - name: Run vulnerability scan
        run: |
          docker scan ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --file Dockerfile

      - name: Build and start containers for testing
        run: docker compose up --build --abort-on-container-exit

      - name: Cleanup
        if: always()
        run: |
          docker system prune -f
