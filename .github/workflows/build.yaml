name: Docker Compose + K6 Pipeline

on:
  push:
    tags:
      - 'feat/**'
      - 'fix/**' 
      - 'enha/**'
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: pppasantos
  IMAGE_NAME: nginx-proxy-cache

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Detect commit type from tag
        id: tag_info
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          if [[ "$TAG_NAME" == feat/* ]]; then
            echo "type=feat" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" == fix/* ]]; then
            echo "type=fix" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" == enha/* ]]; then
            echo "type=enha" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" == v*.*.* ]]; then
            echo "type=version" >> $GITHUB_OUTPUT
          else
            echo "type=other" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Install Snyk CLI
        run: |
          # Instala Snyk CLI - funciona sem token para scans básicos
          npm install -g snyk
          echo "Snyk version:"
          snyk --version

      - name: Snyk Container Scan
        run: |
          echo "=== Snyk Container Security Scan ==="
          # Pull da imagem para scan
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Scan básico (funciona sem token)
          snyk container test ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --file=Dockerfile \
            --severity-threshold=high \
            --json > snyk-container-scan.json 2>/dev/null || echo "Scan completed with findings"
          
          # Gera relatório legível
          snyk container test ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --file=Dockerfile \
            --severity-threshold=high > snyk-container-report.txt || echo "Scan completed with findings"

      - name: Snyk Code Scan (Source Code)
        run: |
          echo "=== Snyk Code Security Scan ==="
          # Scan do código fonte (opcional)
          snyk code test --severity-threshold=high > snyk-code-report.txt 2>/dev/null || echo "Code scan completed with findings"

      - name: Generate SBOM with Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest -o json > sbom-detailed.json
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest > sbom-report.txt

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ steps.tag_info.outputs.tag_name }}
          path: |
            snyk-container-report.txt
            snyk-container-scan.json
            snyk-code-report.txt
            sbom-detailed.json
            sbom-report.txt
          retention-days: 30

      - name: Display security summary
        run: |
          echo "🔒 SECURITY SCAN SUMMARY"
          echo "========================"
          if [ -f snyk-container-report.txt ]; then
            echo "📊 Container Scan Results:"
            grep -E "(✓|✗)" snyk-container-report.txt | head -10 || echo "No issues found or scan incomplete"
          fi
          
          if [ -f snyk-code-report.txt ]; then
            echo ""
            echo "📝 Code Scan Results:"
            grep -E "(✓|✗)" snyk-code-report.txt | head -5 || echo "No code issues found"
          fi

      - name: Build and test with Docker Compose
        run: |
          docker compose up --build -d
          sleep 10
          docker compose ps
          docker compose logs

      - name: Cleanup
        if: always()
        run: docker system prune -f
