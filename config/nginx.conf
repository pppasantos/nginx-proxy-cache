user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;
events {
    worker_connections 2048;
}
http {
    include /usr/local/nginx/conf/mime.types;
    include /usr/local/nginx/conf/http_globals.conf;
    include /usr/local/nginx/conf/log_format.conf;
    include /usr/local/nginx/conf/maps.conf;
 
    lua_package_path "/usr/local/lib/lua/?.lua;/usr/local/share/lua/5.1/?.lua;;";
    lua_shared_dict prometheus_metrics 100M;
    lua_shared_dict locks 10m;
 
 
    init_worker_by_lua_block {
        require("prometheus_metrics").init()
    }
 
    log_by_lua_block {
        require("prometheus_metrics").log()
    }
 
    server {
      listen 8889;
      server_name localhost;
 
      lua_need_request_body on;
 
      include /usr/local/nginx/conf/vars.conf;
 
        body_filter_by_lua_block {
            require("body_logger").capture_response_body()
        }

        access_by_lua_block {
            local req_headers = require("request_headers")
            req_headers.capture_request_headers()
        }

        header_filter_by_lua_block {
            local add_header = require("add_header")
            local resp_headers = require("response_headers")
            resp_headers.capture()
            add_header.set_response_headers()
        }

        if ($is_valid_token = 1) {
            return 403;
        }
 
        location ~ ^/api/character/[^/]+$ {
            add_header X-Pod-Hostname $pod_hostname always;
            add_header Cache-Control "public, max-age=300" always;
            add_header Pragma public;

            proxy_set_header Host rickandmortyapi.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host rickandmortyapi.com;
            proxy_set_header X-Forwarded-Proto "https";
            proxy_set_header X-Forwarded-Port "443";

            content_by_lua_block {
                require("cache_handler").handle()
            }
        }

        location ~* \.(jpe?g|png)$ {
            add_header X-Pod-Hostname $pod_hostname always;
            add_header Cache-Control "public, max-age=300" always;
            add_header Pragma public;

            proxy_set_header Host rickandmortyapi.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host rickandmortyapi.com;
            proxy_set_header X-Forwarded-Proto "https";
            proxy_set_header X-Forwarded-Port "443";

            content_by_lua_block {
                require("cache_handler").handle()
            }
        }

        location / {
            limit_req zone=tokenlimit burst=10 nodelay;
            limit_req_status 429;
            proxy_set_header Host rickandmortyapi.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host rickandmortyapi.com;
            proxy_set_header X-Forwarded-Proto "https";
            proxy_set_header X-Forwarded-Port "443";
            proxy_pass https://rickandmortyapi.com;
        }
 
        location = /cache_invalidate {
            content_by_lua_block {
            require("redis_key_invalidation").invalidate_key()
            }
        }
 
        location /_nginx_healthcheck {
            access_log off;
            default_type 'text/plain';
            return 200 'WORKING\n';
        }
 
    }
 
    server {
        listen 8890;
        location = /monitoring/metrics {
            set $cache_status "BYBASS";   
            access_log off;
            content_by_lua_block {
                require("prometheus_metrics").collect()
            }
        }
    }
}
